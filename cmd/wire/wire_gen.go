// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package wira

import (
	"fmt"
	"github.com/XoronEdge/asksquare/domain"
	"github.com/XoronEdge/asksquare/initial"
	postgres2 "github.com/XoronEdge/asksquare/internal/questionAction/repo/postgres"
	usecase2 "github.com/XoronEdge/asksquare/internal/questionAction/usecase"
	"github.com/XoronEdge/asksquare/internal/user/repo/postgres"
	"github.com/XoronEdge/asksquare/internal/user/usecase"
	"github.com/google/wire"
	"time"
)

// Injectors from wire.go:

func InitializeDi() Di {
	db := initial.GetDB()
	userRepo := postgres.NewUserRepo(db)
	duration := NewTime()
	userUsecase := usecase.NewUserUsecase(userRepo, duration)
	qaReportRepo := postgres2.NewQaReportRepo(db)
	qaReportUsecase := usecase2.NewQaReportUsecase(qaReportRepo, duration)
	qaHideRepo := postgres2.NewQaHideRepo(db)
	qaHideUsecase := usecase2.NewQaHideUsecase(qaHideRepo, duration)
	di := NewDi(userUsecase, qaReportUsecase, qaHideUsecase)
	return di
}

// wire.go:

func init() {
	fmt.Println("----------Its Working")
}

//Di ...
type Di struct {
	Uc  domain.UserUsecase
	QRc domain.QaReportUsecase
	QHc domain.QaHideUsecase
}

//NewDi return
func NewDi(Uc domain.UserUsecase, QRc domain.QaReportUsecase, QHc domain.QaHideUsecase) Di {
	return Di{Uc: Uc, QRc: QRc, QHc: QHc}
}

//Set1 ...
var Set1 = wire.NewSet(usecase.NewUserUsecase, wire.Bind(new(domain.UserUsecase), new(*usecase.UserUsecase)))

//Set2 ...
var Set2 = wire.NewSet(usecase2.NewQaReportUsecase, wire.Bind(new(domain.QaReportUsecase), new(*usecase2.QaReportUsecase)))

//Set3 ...
var Set3 = wire.NewSet(usecase2.NewQaHideUsecase, wire.Bind(new(domain.QaHideUsecase), new(*usecase2.QaHideUsecase)))

//NewTime ...
func NewTime() time.Duration {
	return time.Minute
}
